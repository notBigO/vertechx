generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  image    String?
  accounts Account[]
  sessions Session[]
  role     Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  VERIFIED
  FAILED
}

model Event {
  id                   String         @id @default(uuid())
  title                String
  slug                 String         @unique
  description          String
  // judgingCriteria      String?
  rules                String?
  eventCoordinatorInfo String?
  poster_url           String?
  date                 DateTime?
  time                 String?
  venue                String?
  registrationFee      Float?
  // firstPrize           String?
  // secondPrize          String?
  // category             String?
  isGroup              Boolean?       @default(false)
  minParticipants      Int?           @default(1)
  maxParticipants      Int?           @default(1)
  registrations        Registration[]

  @@map("events")
}

model Registration {
  id                  String        @id @default(cuid())
  eventId             String
  userId              String?
  email               String?
  name                String
  phone               String
  collegeName         String
  noOfParticipants    Int?
  participants        Participant[]
  paymentVerification PaymentStatus @default(PENDING)
  paymentAmount       Float?
  paymentId           String?
  screenshotUrl       String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  event               Event         @relation(fields: [eventId], references: [id])
  // isCheckedIn         Boolean?      @default(false)
  checkedInAt         DateTime?
}

model Participant {
  id             String       @id @default(cuid())
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  registrationId String
  name           String
  phone          String
  isCheckedIn    Boolean?     @default(false)
  checkedInAt    DateTime?
}